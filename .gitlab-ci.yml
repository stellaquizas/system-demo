stages:
  - test
  - build
  - deploy-staging
  - deploy-production

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ""

# Cache dependencies between jobs
cache:
  paths:
    - system-rest/.m2/
    - system-vue/node_modules/

# Backend Pipeline
test-backend:
  stage: test
  image: eclipse-temurin:17-jdk
  script:
    - cd system-rest
    - ./mvnw test
  artifacts:
    reports:
      junit: system-rest/target/surefire-reports/TEST-*.xml
  rules:
    - changes:
        - system-rest/**/*

# Frontend Pipeline
test-frontend:
  stage: test
  image: node:18
  script:
    - cd system-vue
    - npm install
    - npm run lint
    # Add test command if you have tests set up
    # - npm run test
  rules:
    - changes:
        - system-vue/**/*

build-backend:
  stage: build
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  script:
    - cd system-rest
    - docker build -t $CI_REGISTRY_IMAGE/system-rest:$CI_COMMIT_SHORT_SHA .
    - docker tag $CI_REGISTRY_IMAGE/system-rest:$CI_COMMIT_SHORT_SHA $CI_REGISTRY_IMAGE/system-rest:latest
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker push $CI_REGISTRY_IMAGE/system-rest:$CI_COMMIT_SHORT_SHA
    - docker push $CI_REGISTRY_IMAGE/system-rest:latest
  rules:
    - changes:
        - system-rest/**/*
    - if: $CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH == "master"

build-frontend:
  stage: build
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  script:
    - cd system-vue
    - docker build -t $CI_REGISTRY_IMAGE/system-vue:$CI_COMMIT_SHORT_SHA .
    - docker tag $CI_REGISTRY_IMAGE/system-vue:$CI_COMMIT_SHORT_SHA $CI_REGISTRY_IMAGE/system-vue:latest
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker push $CI_REGISTRY_IMAGE/system-vue:$CI_COMMIT_SHORT_SHA
    - docker push $CI_REGISTRY_IMAGE/system-vue:latest
  rules:
    - changes:
        - system-vue/**/*
    - if: $CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH == "master"

deploy-backend-staging:
  stage: deploy-staging
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - echo "Deploying backend to staging server..."
    - ssh $SSH_USER@$SSH_HOST_STAGING "cd /path/to/backend-deployment && docker-compose pull && docker-compose up -d"
  environment:
    name: backend-staging
    url: https://api-staging.yourdomain.com
  rules:
    - changes:
        - system-rest/**/*
    - if: $CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH == "master"
  when: manual # Makes this a manual deployment step

deploy-frontend-staging:
  stage: deploy-staging
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - echo "Deploying frontend to staging server..."
    - ssh $SSH_USER@$SSH_HOST_STAGING "cd /path/to/frontend-deployment && docker-compose pull && docker-compose up -d"
  environment:
    name: frontend-staging
    url: https://staging.yourdomain.com
  rules:
    - changes:
        - system-vue/**/*
    - if: $CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH == "master"
  when: manual # Makes this a manual deployment step

deploy-backend-production:
  stage: deploy-production
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - echo "Deploying backend to production server..."
    - ssh $SSH_USER@$SSH_HOST_PROD "cd /path/to/backend-deployment && docker-compose pull && docker-compose up -d"
  environment:
    name: backend-production
    url: https://api.yourdomain.com
  rules:
    - changes:
        - system-rest/**/*
    - if: $CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH == "master"
  when: manual # Makes this a manual deployment step
  needs:
    - deploy-backend-staging

deploy-frontend-production:
  stage: deploy-production
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - echo "Deploying frontend to production server..."
    - ssh $SSH_USER@$SSH_HOST_PROD "cd /path/to/frontend-deployment && docker-compose pull && docker-compose up -d"
  environment:
    name: frontend-production
    url: https://yourdomain.com
  rules:
    - changes:
        - system-vue/**/*
    - if: $CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH == "master"
  when: manual # Makes this a manual deployment step
  needs:
    - deploy-frontend-staging
