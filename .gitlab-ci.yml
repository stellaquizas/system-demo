stages:
  - test
  - build
  - deploy-dev
  - deploy-staging
  - deploy-production
  - release
  - validate

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ""

# Cache dependencies between jobs
cache:
  paths:
    - system-rest/.m2/
    - system-vue/node_modules/

# Backend Pipeline
test-backend:
  stage: test
  image: eclipse-temurin:17-jdk
  script:
    - cd system-rest
    - ./mvnw test
  artifacts:
    reports:
      junit: system-rest/target/surefire-reports/TEST-*.xml
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH == "master" || $CI_COMMIT_BRANCH == "develop" || $CI_COMMIT_BRANCH =~ /^release\/.*/ || $CI_COMMIT_BRANCH =~ /^feature\/.*/ || $CI_COMMIT_TAG =~ /^v\d+\.\d+\.\d+$/
      changes:
        - system-rest/**/*

# Frontend Pipeline
test-frontend:
  stage: test
  image: node:18
  script:
    - cd system-vue
    - npm install
    - npm run lint || true
    # Add test command if you have tests set up
    - npm run test || true
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH == "master" || $CI_COMMIT_BRANCH == "develop" || $CI_COMMIT_BRANCH =~ /^release\/.*/ || $CI_COMMIT_BRANCH =~ /^feature\/.*/ || $CI_COMMIT_TAG =~ /^v\d+\.\d+\.\d+$/
      changes:
        - system-vue/**/*

build-backend:
  stage: build
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  script:
    - cd system-rest
    - |
      if [[ $CI_COMMIT_TAG =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
        VERSION=${CI_COMMIT_TAG#v}
      elif [[ $CI_COMMIT_BRANCH =~ ^release/([0-9]+\.[0-9]+\.[0-9]+)$ ]]; then
        VERSION=${BASH_REMATCH[1]}-RC
      elif [[ $CI_COMMIT_BRANCH == "develop" ]]; then
        VERSION=develop
      else
        VERSION=latest
      fi
    - docker build -t $CI_REGISTRY_IMAGE/system-rest:$VERSION -t $CI_REGISTRY_IMAGE/system-rest:$CI_COMMIT_SHORT_SHA .
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker push $CI_REGISTRY_IMAGE/system-rest:$VERSION
    - docker push $CI_REGISTRY_IMAGE/system-rest:$CI_COMMIT_SHORT_SHA
  rules:
    - if: $CI_COMMIT_BRANCH == "develop" || $CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH == "master" || $CI_COMMIT_BRANCH =~ /^release\/.*/ || $CI_COMMIT_TAG =~ /^v\d+\.\d+\.\d+$/
      changes:
        - system-rest/**/*

build-frontend:
  stage: build
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  script:
    - cd system-vue
    - |
      if [[ $CI_COMMIT_TAG =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
        VERSION=${CI_COMMIT_TAG#v}
      elif [[ $CI_COMMIT_BRANCH =~ ^release/([0-9]+\.[0-9]+\.[0-9]+)$ ]]; then
        VERSION=${BASH_REMATCH[1]}-RC
      elif [[ $CI_COMMIT_BRANCH == "develop" ]]; then
        VERSION=develop
      else
        VERSION=latest
      fi
    - docker build -t $CI_REGISTRY_IMAGE/system-vue:$VERSION -t $CI_REGISTRY_IMAGE/system-vue:$CI_COMMIT_SHORT_SHA .
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker push $CI_REGISTRY_IMAGE/system-vue:$VERSION
    - docker push $CI_REGISTRY_IMAGE/system-vue:$CI_COMMIT_SHORT_SHA
  rules:
    - if: $CI_COMMIT_BRANCH == "develop" || $CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH == "master" || $CI_COMMIT_BRANCH =~ /^release\/.*/ || $CI_COMMIT_TAG =~ /^v\d+\.\d+\.\d+$/
      changes:
        - system-vue/**/*

deploy-backend-dev:
  stage: deploy-dev
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - echo "Deploying backend to development server..."
    - ssh $SSH_USER@$SSH_HOST_DEV "cd /path/to/backend-deployment && docker-compose pull && docker-compose up -d"
  environment:
    name: backend-development
    url: https://api-dev.yourdomain.com
  rules:
    - if: $CI_COMMIT_BRANCH == "develop"
      changes:
        - system-rest/**/*

deploy-frontend-dev:
  stage: deploy-dev
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - echo "Deploying frontend to development server..."
    - ssh $SSH_USER@$SSH_HOST_DEV "cd /path/to/frontend-deployment && docker-compose pull && docker-compose up -d"
  environment:
    name: frontend-development
    url: https://app-dev.yourdomain.com
  rules:
    - if: $CI_COMMIT_BRANCH == "develop"
      changes:
        - system-vue/**/*

deploy-backend-staging:
  stage: deploy-staging
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - echo "Deploying backend to staging server..."
    - ssh $SSH_USER@$SSH_HOST_STAGING "cd /path/to/backend-deployment && docker-compose pull && docker-compose up -d"
  environment:
    name: backend-staging
    url: https://api-staging.yourdomain.com
  rules:
    - if: $CI_COMMIT_BRANCH =~ /^release\/.*/
      changes:
        - system-rest/**/*
  when: manual # Makes this a manual deployment step

deploy-frontend-staging:
  stage: deploy-staging
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - echo "Deploying frontend to staging server..."
    - ssh $SSH_USER@$SSH_HOST_STAGING "cd /path/to/frontend-deployment && docker-compose pull && docker-compose up -d"
  environment:
    name: frontend-staging
    url: https://app-staging.yourdomain.com
  rules:
    - if: $CI_COMMIT_BRANCH =~ /^release\/.*/
      changes:
        - system-vue/**/*
  when: manual # Makes this a manual deployment step

deploy-backend-production:
  stage: deploy-production
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - echo "Deploying backend to production server..."
    - ssh $SSH_USER@$SSH_HOST_PROD "cd /path/to/backend-deployment && docker-compose pull && docker-compose up -d"
  environment:
    name: backend-production
    url: https://api.yourdomain.com
  rules:
    - if: $CI_COMMIT_TAG =~ /^v\d+\.\d+\.\d+$/
      changes:
        - system-rest/**/*
  when: manual # Makes this a manual deployment step

deploy-frontend-production:
  stage: deploy-production
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - echo "Deploying frontend to production server..."
    - ssh $SSH_USER@$SSH_HOST_PROD "cd /path/to/frontend-deployment && docker-compose pull && docker-compose up -d"
  environment:
    name: frontend-production
    url: https://app.yourdomain.com
  rules:
    - if: $CI_COMMIT_TAG =~ /^v\d+\.\d+\.\d+$/
      changes:
        - system-vue/**/*
  when: manual # Makes this a manual deployment step

validate-release-branch:
  stage: validate
  image: alpine:latest
  script:
    - apk add --no-cache bash grep
    - |
      if [[ $CI_COMMIT_BRANCH =~ ^release/([0-9]+\.[0-9]+\.[0-9]+)$ ]]; then
        VERSION=${BASH_REMATCH[1]}
        echo "Release branch for version $VERSION detected"
        if grep -q "## \[$VERSION\]" CHANGELOG.md; then
          echo "✅ CHANGELOG.md contains entry for version $VERSION"
        else
          echo "❌ CHANGELOG.md does not contain entry for version $VERSION"
          exit 1
        fi
      fi
  rules:
    - if: $CI_COMMIT_BRANCH =~ /^release\/.*/

release:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  rules:
    - if: $CI_COMMIT_TAG =~ /^v\d+\.\d+\.\d+$/
  script:
    - VERSION=${CI_COMMIT_TAG#v}
    - echo "Generating release notes for version $VERSION"
    - |
      # Extract content between the version header and the next header
      sed -n "/## \[$VERSION\]/,/## \[/p" CHANGELOG.md | sed '$d' > RELEASE_NOTES.md
    - cat RELEASE_NOTES.md
  release:
    name: "Release $CI_COMMIT_TAG"
    description: "./RELEASE_NOTES.md"
    tag_name: "$CI_COMMIT_TAG"
    assets:
      links:
        - name: "VERSION.txt"
          url: "${CI_PROJECT_URL}/-/raw/${CI_COMMIT_TAG}/VERSION.txt"
        - name: "CHANGELOG.md"
          url: "${CI_PROJECT_URL}/-/raw/${CI_COMMIT_TAG}/CHANGELOG.md"
